// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

model Dataset {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  name      String
  hash      String
  isCustom  Boolean  @default(false)
  createdAt DateTime @default(now())

  jobs Job[]
}

enum Scenario {
  filtering
  matching
}

enum Param {
  recall
  epochs
}

model Algorithm {
  id        Int        @id @default(autoincrement())
  code      String     @unique
  name      String
  scenarios Scenario[]
  params    Param[]
  createdAt DateTime   @default(now())

  filteringJobs Job[] @relation("filteringAlgo")
  matchingJobs  Job[] @relation("matchingAlgo")
}

enum Status {
  pending
  queued
  filtering
  matching
  completed
  failed
}

model Job {
  id               String   @id @default(cuid())
  status           Status   @default(pending)
  datasetId        Int
  filteringAlgoId  Int
  filteringParams  Json?
  filteringSlurmId Int?
  matchingAlgoId   Int
  matchingParams   Json?
  matchingSlurmId  Int?
  notifyEmail      String?
  createdAt        DateTime @default(now())

  filteringAlgo Algorithm     @relation("filteringAlgo", fields: [filteringAlgoId], references: [id])
  matchingAlgo  Algorithm     @relation("matchingAlgo", fields: [matchingAlgoId], references: [id])
  dataset       Dataset       @relation(fields: [datasetId], references: [id])
  result        Result?
  predictions   Predictions[]
}

// the model should share id with Jobs
model Result {
  job   Job    @relation(fields: [jobId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  jobId String @id

  // filtering
  filteringF1        Float?
  filteringPrecision Float?
  filteringRecall    Float?
  filteringTime     BigInt?

  filteringCandidates Int?
  filteringEntriesA  Int?
  filteringEntriesB  Int?
  filteringMatches   Int?

  // matching
  f1        Float?
  precision Float?
  recall    Float?
  trainTime BigInt?
  evalTime  BigInt?

  // resources
  cpuAllocated   Int?
  cpuUtilized    BigInt?
  memUtilized    BigInt?
  gpuAllocated   Int?
  gpuUtilized    BigInt?
  gpuMemUtilized BigInt?
  energyConsumed BigInt?
  totalRuntime   BigInt?

  createdAt DateTime @default(now())
}

model Predictions {
  job   Job    @relation(fields: [jobId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  jobId String

  tableA_id   BigInt
  tableB_id   BigInt
  probability Float?

  @@id([jobId, tableA_id, tableB_id])
}
